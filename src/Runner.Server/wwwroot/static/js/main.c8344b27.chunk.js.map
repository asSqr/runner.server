{"version":3,"sources":["components/MasterDetail/MasterDetail.module.scss","components/Header/Header.module.scss","components/ListItem/ListItem.module.scss","components/ListItemLink/ListItemLink.module.scss","utils/media-queries.model.ts","components/Header/Header.tsx","components/ListItem/ListItem.tsx","components/ListItemLink/ListItemLink.tsx","components/MasterDetail/MasterDetail.tsx","state/store.selectors.ts","containers/Detail/Detail.tsx","containers/Master/Master.tsx","App.tsx","serviceWorker.js","index.js","containers/Detail/Detail.module.scss"],"names":["module","exports","mediaQueries","Header","props","className","styles","header","query","matches","to","back","style","visibility","hideBackButton","title","defaultProps","listItemNoDataMessage","ListItem","component","inner","item","description","ListItemLink","exact","activeClassName","active","MasterDetail","path","useRouteMatch","master","MasterType","masterProps","detail","DetailType","detailProps","getJobById","jobs","id","actualId","parseInt","undefined","x","find","i","obj","requestId","jobId","timeLineId","job","listArtifacts","runid","a","artifactUrl","ghHostApiUrl","fetch","response","text","body","JSON","parse","getContainerItems","artifactName","containerUrl","resourceUrl","URL","searchParams","append","toString","DetailContainer","useState","setJobs","timeline","setTimeline","artifacts","setArtifacts","setTitle","useParams","owner","repo","errors","setErrors","useEffect","_","_id","Number","length","json","njobs","timelineId","status","newTimeline","shift","name","e","value","count","element","fileContainerResourceUrl","items","files","source","EventSource","missed","callback","s","t","record","stepId","convert","Convert","newline","escapeXML","log","location","content","startLine","console","lines","missingLines","reduce","prev","c","toHtml","line","addEventListener","ev","data","push","oldtimeline","del","splice","result","state","close","main","width","onClick","event","method","map","container","file","href","contentLocation","Collapsible","openedClassName","triggerClassName","Collapsible__trigger","triggerOpenedClassName","contentOuterClassName","Collapsible__contentOuter","contentInnerClassName","Collapsible__contentInner","trigger","onOpening","busy","item2","logs","split","offset","re","test","substring","currentValue","textAlign","whiteSpace","maxHeight","overflow","fontFamily","dangerouslySetInnerHTML","__html","MasterContainer","url","r","filter","j","unshift","apiUrl","newjobs","sjobs","sort","b","Fragment","workflowname","App","render","from","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8344b27.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"MasterDetail_component__3wcp7\",\"master\":\"MasterDetail_master__234Gw\",\"detail\":\"MasterDetail_detail__3kqX2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\",\"back\":\"Header_back__wpziz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"ListItem_component__3qZPO\",\"inner\":\"ListItem_inner__1zWjS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"ListItemLink_component__vDHNX\",\"active\":\"ListItemLink_active__3JAiU\"};","export const mediaQueries = {\n    xs: null,\n    sm: null,\n    md: '(max-width: 599px)',\n    lg: null,\n    xl: null\n};  ","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Media from 'react-media';\nimport { mediaQueries } from 'utils';\nimport styles from './Header.module.scss';\n\nexport interface HeaderProps {\n    title: string,\n    hideBackButton?: boolean\n}\n\nexport const headerEmptyTitle = 'No Title';\n\nexport const Header: React.FC<HeaderProps> = (props) => {\n\n    return (\n        <div className={styles.header}>\n\n            <Media query={mediaQueries.md}>\n                { matches => matches ? (\n                    <Link to=\"../../../../\" className={styles.back}\n                        style={{ visibility: props.hideBackButton ? 'hidden' : 'visible' }}>\n                        Back\n                    </Link>\n                ): (\n                    <div>&nbsp;</div>\n                )}\n            </Media>\n\n            <h1 data-test=\"HeaderTitle\">\n                { props.title || headerEmptyTitle } \n            </h1>\n\n        </div> \n    );\n}\n\nHeader.defaultProps = {\n    hideBackButton: false\n};\n\nexport default Header;","import React from 'react'; \nimport { Item } from 'state';\nimport styles from './ListItem.module.scss';\n\nexport interface ListItemProps {\n    item: Item\n};\n\nexport const listItemNoDataMessage = 'No Data';\n\nexport const ListItem: React.FC<ListItemProps> = (props) => {\n    \n    return (\n        <div className={styles.component}>\n\n            <div className={styles.inner}>\n\n                <h1 data-test=\"ListItemHeading\">\n                    { props.item.title ? props.item.title : listItemNoDataMessage  }\n                </h1> \n\n                <h2 data-test=\"ListItemSubHeading\">\n                    { props.item.description ?  props.item.description : listItemNoDataMessage }\n                </h2>\n\n            </div>\n\n        </div> \n    );\n};\n\nexport default ListItem;","import React from 'react'; \nimport { NavLink } from 'react-router-dom';\nimport { ListItem, ListItemProps } from '../ListItem/ListItem';\nimport styles from './ListItemLink.module.scss';\n\nexport interface ListItemLinkProps extends ListItemProps {\n    to: string\n}\n\nexport const ListItemLink: React.FC<ListItemLinkProps> = (props) => {  \n    return (\n        <NavLink exact to={props.to}\n            className={styles.component}\n            activeClassName={styles.active}>\n            <ListItem {...props} />\n        </NavLink>\n    );\n};\n\nexport default ListItemLink;","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport Media from 'react-media';\nimport { mediaQueries } from 'utils';\nimport styles from './MasterDetail.module.scss';\n\nexport interface MasterDetailProps {\n    MasterType: any,\n    masterProps: any,\n    DetailType:  any,\n    detailProps: any\n}\n\nexport const MasterDetail: React.FC<MasterDetailProps> = (props) => {\n    let { path } = useRouteMatch() as any;\n    const master = (\n        <props.MasterType {...props.masterProps}\n            data-test=\"Master\" />);\n    const detail = (\n        <props.DetailType {...props.detailProps} \n            data-test=\"Detail\" />);\n\n    return ( \n        <Media query={mediaQueries.md}>\n            {matches =>\n                matches ? (\n                    <Switch>\n                        <Route exact path={`${path}`}>\n                            {master}\n                        </Route>\n                        <Route path={`${path}/detail/:id`}>\n                            {detail}\n                        </Route>\n                    </Switch>\n                ) : (\n                    <section className={styles.component}>\n                        <section className={styles.master}>\n                            <Route path={`${path}`}>\n                                {master}\n                            </Route>\n                        </section>\n                        <section className={styles.detail}>\n                            <Switch>\n                                <Route exact path={`${path}`}>\n                                    {detail} \n                                </Route>\n                                <Route path={`${path}/detail/:id`}>\n                                    {detail}\n                                </Route>\n                            </Switch>\n                        </section>\n                    </section>\n                    )\n            }\n        </Media>\n    );\n};","import { Item } from './example.model';\n\nexport interface IJob {\n    jobId: string,\n    requestId: number,\n    timeLineId: string,\n    name: string,\n    repo: string,\n    workflowname: string,\n    runid : number,\n    errors: string[],\n}\n\nexport const getJobById = (jobs : IJob[], id: number | string | undefined): { item: Item | null, job: IJob | null } => {\n    const actualId = (typeof id === 'string') ?\n        parseInt(id, 10): id;\n    var item : Item | null = null;\n    if(actualId !== undefined && actualId !== null) {\n        var x : IJob | null = jobs.find((x, i, obj) => x.requestId === actualId) || null;\n        if(x !== null) {\n            item = { id:  x.requestId, title: x.jobId, description: x.timeLineId }\n            return { item : item, job:x };\n        }\n    }\n    return { item : null, job : null };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Header } from 'components';\nimport { getJobById, IJob } from '../../state/store.selectors';\nimport { Item } from '../../state/example.model';\nimport styles from './Detail.module.scss';\nimport Convert from 'ansi-to-html'; \n\nimport Collapsible from 'react-collapsible';\nimport { ghHostApiUrl } from 'settings';\n\nexport interface DetailProps {\n    item: Item | null\n}\n\ninterface ILog {\n    id: number,\n    location: string\n    content: string\n}\n\ninterface ITimeLine {\n    id: string,\n    Type: string,\n    log: ILog | null,\n    order: Number,\n    name: string,\n    busy: boolean,\n    state: string,\n    result: string\n}\n\n// interface IJobEvent {\n//     repo: string,\n//     job: IJob \n// }\n\ninterface ILogline {\n    line : string,\n    lineNumber: number\n}\n\ninterface IRecord {\n    value: string[],\n    stepId: string,\n    startLine: number\n    count: number\n}\n\ninterface ILoglineEvent {\n    recordId: string,\n    record: IRecord\n}\n\ninterface ITimeLineEvent {\n    timeline: ITimeLine[],\n    timelineId: string\n}\n\n\n// Artifacts\n\nexport interface ArtifactResponse {\n    containerId: string\n    size: number\n    signedContent: string\n    fileContainerResourceUrl: string\n    type: string\n    name: string\n    url: string\n\n    files: ContainerEntry[] | null\n  }\n  \n  export interface CreateArtifactParameters {\n    Type: string\n    Name: string\n    RetentionDays?: number\n  }\n  \n  export interface PatchArtifactSize {\n    Size: number\n  }\n  \n  export interface PatchArtifactSizeSuccessResponse {\n    containerId: number\n    size: number\n    signedContent: string\n    type: string\n    name: string\n    url: string\n    uploadUrl: string\n  }\n  \n  export interface UploadResults {\n    uploadSize: number\n    totalSize: number\n    failedItems: string[]\n  }\n  \n  export interface ListArtifactsResponse {\n    count: number\n    value: ArtifactResponse[]\n  }\n  \n  export interface QueryArtifactResponse {\n    count: number\n    value: ContainerEntry[]\n  }\n  \n  export interface ContainerEntry {\n    containerId: number\n    scopeIdentifier: string\n    path: string\n    itemType: string\n    status: string\n    fileLength?: number\n    fileEncoding?: number\n    fileType?: number\n    dateCreated: string\n    dateLastModified: string\n    createdBy: string\n    lastModifiedBy: string\n    itemLocation: string\n    contentLocation: string\n    fileId?: number\n    contentId: string\n  }\n\n/**\n * Gets a list of all artifacts that are in a specific container\n */\nasync function listArtifacts(runid : number): Promise<ListArtifactsResponse> {\nconst artifactUrl = ghHostApiUrl + \"/runner/host/_apis/pipelines/workflows/\" + runid + \"/artifacts\"\n\nconst response = await fetch(artifactUrl);\nconst body: string = await response.text()\nreturn JSON.parse(body)\n}\n\n/**\n   * Fetches a set of container items that describe the contents of an artifact\n   * @param artifactName the name of the artifact\n   * @param containerUrl the artifact container URL for the run\n   */\n async function getContainerItems(\n    artifactName: string,\n    containerUrl: string\n  ): Promise<QueryArtifactResponse> {\n    // the itemPath search parameter controls which containers will be returned\n    const resourceUrl = new URL(containerUrl)\n    resourceUrl.searchParams.append('itemPath', artifactName)\n\n    const response = await fetch(resourceUrl.toString());\n    const body: string = await response.text()\n    return JSON.parse(body)\n  }\n\n// End Artifacts\n\n\nexport const DetailContainer : React.FC<DetailProps> = (props) => {\n    const [ jobs, setJobs ] = useState<IJob[] | null>([]);\n    const [ timeline, setTimeline ] = useState<ITimeLine[]>([]);\n    const [ artifacts, setArtifacts ] = useState<ArtifactResponse[]>([]);\n    const [ title, setTitle] = useState<string>(\"Loading...\");\n    const { id } = useParams();\n    const { owner, repo } = useParams();\n    const [ errors, setErrors] = useState<string[]>([]);\n\n\n    useEffect(() => {\n        (async () => {\n            setArtifacts(_ => []);\n            if(id === undefined) {\n                return;\n            }\n            var njobs : IJob[] | null;\n            var _id = Number.parseInt(id);\n            if(jobs.length === 0 || jobs.find(x => x.requestId === _id) == null) {\n                njobs = await (await (await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message\", { })).json())\n                setJobs(njobs);\n            }\n            var query = getJobById(njobs || jobs, id);\n            if(query.job.errors !== null && query.job.errors.length > 0) {\n                setErrors(query.job.errors);\n            } else {\n                setErrors([]);\n            }\n            const item = query.item;\n            const timelineId = item ? item.description : null;\n            if(timelineId != null) {\n                var timeline = await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Timeline/\" + timelineId, { });\n                if(timeline.status === 200) {\n                    var newTimeline = await timeline.json() as ITimeLine[];\n                    if(newTimeline != null && newTimeline.length > 1) {\n                        setTitle(newTimeline.shift().name);\n                        setTimeline(newTimeline);\n                    } else {\n                        setTitle(\"Unknown\");\n                        setTimeline([]);\n                    }\n                } else {\n                    setTitle((query.job.errors !== null && query.job.errors.length > 0) ? \"Failed to run\" : \"Wait for workflow to run...\");\n                    setTimeline(e => []);\n                }\n            }\n            if(query.job.runid !== -1) {\n                var artifacts = await listArtifacts(query.job.runid);\n                if(artifacts.value !== undefined) {\n                    for (let i = 0; i < artifacts.count; i++) {\n                        const element = artifacts.value[i];\n                        var items = await getContainerItems(element.name, element.fileContainerResourceUrl)\n                        if(items !== undefined) {\n                            element.files = items.value \n                        }\n                    }\n                    setArtifacts(_ => artifacts.value);\n                }\n            }\n        })();\n    }, [id, jobs, owner, repo])\n    useEffect(() => {\n        if(id !== undefined && id !== null && id.length > 0) {\n            var item = getJobById(jobs, id).item;\n            if(item !== null && item.description && item.description != '' && item.description != \"00000000-0000-0000-0000-000000000000\") {\n                var source = new EventSource(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/TimeLineWebConsoleLog?timelineId=\"+ item.description);\n                try {\n                    var missed : ILoglineEvent[] = [];\n                    var callback = function(timeline, e:ILoglineEvent) {\n                        var s = timeline.find(t => t.id === e.record.stepId);\n                        var convert = new Convert({\n                            newline: true,\n                            escapeXML: true\n                        });\n                        if(s != null && s != undefined) {\n                            if(s.log == null) {\n                                s.log = { id:-1, location: null, content: \"\"};\n                                if(e.record.startLine > 1) {\n                                    (async () => {\n                                        console.log(\"Downloading previous log lines of this step...\");\n                                        var lines = await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/TimeLineWebConsoleLog/\" + item.description + \"/\" + e.record.stepId, { });\n                                        if(lines.status === 200) {\n                                            var missingLines = await lines.json() as ILogline[];\n                                            missingLines.length = e.record.startLine - 1;\n                                            s.log.content = missingLines.reduce((prev: string, c : ILogline) => (prev.length > 0 ? prev + \"<br/>\" : \"\") + convert.toHtml(c.line), \"\") + s.log.content;\n                                        } else {\n                                            console.log(\"No logs to download..., currently fixes itself\");\n                                        }\n                                    })();\n                                }\n                            }\n                            if (s.log.id === -1) {\n                                s.log.content = e.record.value.reduce((prev: string, c : string) => (prev.length > 0 ? prev + \"<br/>\" : \"\") + convert.toHtml(c), s.log.content);\n                            }\n                            return true;\n                        }\n                        return false;\n                    }\n                    source.addEventListener (\"log\", (ev : MessageEvent) => {\n                        console.log(\"new logline \" + ev.data);\n                        var e = JSON.parse(ev.data) as ILoglineEvent;\n                        setTimeline(timeline => {\n                            if(callback(timeline, e)) {\n                                return [...timeline];\n                            }\n                            missed.push(e);\n                            return timeline;\n                        });\n                    });\n                    source.addEventListener (\"timeline\", (ev : MessageEvent) => {\n                        var e = JSON.parse(ev.data) as ITimeLineEvent;\n                        setTitle(e.timeline.shift().name);\n                        setTimeline(oldtimeline => {\n                            var del = e.timeline.splice(0, oldtimeline.length)\n                            for (let i = 0; i < del.length; i++) {\n                                oldtimeline[i].result = del[i].result;\n                                oldtimeline[i].state = del[i].state;\n                            }\n                            if(e.timeline.length === 0) {\n                                // Todo Merge Timelines here\n                                return oldtimeline;\n                            }\n                            var timeline = [...oldtimeline, ...e.timeline]\n                            for (; missed.length > 0;) {\n                                if(callback(timeline, missed[0])) {\n                                    missed.shift();\n                                } else {\n                                    break;\n                                }\n                            }\n                            return timeline;\n                        });\n                        // console.log(ev.data)\n                    });\n                } finally {\n                    return () => {\n                        source.close();\n                    }\n                }\n            }\n        }\n        return () => {}\n    }, [id, jobs, owner, repo]);\n\n    return (\n        <section className={styles.component}>\n        <Header title={title} />\n        <main className={styles.main}>\n            <div className={styles.text} style={{width: '100%'}}>\n                {(() => {\n                    var job = getJobById(jobs, id);\n                    if(job !== undefined && job.job != null) {\n                        return  <button onClick={(event) => {\n                            (async () => {\n                                await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message/cancel/\" + job.job.jobId, { method: \"POST\" });\n                            })();\n                        }}>Cancel</button>;\n                    }\n                    return <div>This Job was cancelled</div>;\n                })()\n                }\n                \n                {errors.map(e => <div>Error: {e}</div>)}\n                {artifacts.map((container: ArtifactResponse) => <div><div>{container.name}</div>{(() => {\n                    if(container.files !== undefined) {\n                        return container.files.map(file => <div><a href={file.contentLocation}>{file.path}</a></div>);\n                    }\n                    return <div/>;\n                })()}</div>)}\n                {timeline.map((item: ITimeLine) =>\n                    <Collapsible key={id + item.id} className={styles.Collapsible} openedClassName={styles.Collapsible} triggerClassName={styles.Collapsible__trigger} triggerOpenedClassName={styles.Collapsible__trigger + \" \" + styles[\"is-open\"]} contentOuterClassName={styles.Collapsible__contentOuter} contentInnerClassName={styles.Collapsible__contentInner} trigger={(item.result == null ? item.state == null ? \"Waiting\" : item.state  : item.result) + \" - \" + item.name} onOpening={() => {\n                        if(!item.busy && (item.log == null || (item.log.id !== -1 && (!item.log.content || item.log.content.length === 0)))) {\n                            item.busy = true;\n                            (async() => {\n                                try {\n                                    var convert = new Convert({\n                                        newline: true,\n                                        escapeXML: true\n                                    });\n                                    if(item.log == null) {\n                                        console.log(\"Downloading previous log lines of this step...\");\n                                        const item2 = getJobById(jobs, id).item;\n                                        var logs = await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/TimeLineWebConsoleLog/\" + item2.description + \"/\" + item.id, { });\n                                        if(logs.status === 200) {\n                                            var missingLines = await logs.json() as ILogline[];\n                                            item.log = { id: -1, location: null, content: missingLines.reduce((prev: string, c : ILogline) => (prev.length > 0 ? prev + \"<br/>\" : \"\") + convert.toHtml(c.line), \"\") };\n                                        } else {\n                                            console.log(\"No logs to download...\");\n                                        }\n                                    } else {\n                                        const log = await (await fetch(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Logfiles/\" + item.log.id, { })).text();\n                                        var lines = log.split('\\n');\n                                        var offset = '2021-04-02T15:50:14.6619714Z '.length;\n                                        var re = /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{7}Z /;\n                                        lines[0] = convert.toHtml(re.test(lines[0]) ? lines[0].substring(offset) : lines[0]);\n                                        item.log.content = lines.reduce((prev, currentValue) => (prev.length > 0 ? prev + \"<br/>\" : \"\") + convert.toHtml(re.test(currentValue) ? currentValue.substring(offset) : currentValue));\n                                    }\n                                } finally {\n                                    item.busy = false;\n                                    // that.forceUpdate();\n                                    setTimeline((t) => {\n                                        return [...t];\n                                    });\n                                }\n                            })();\n                        }\n                    }}>\n                        <div style={{ textAlign: 'left', whiteSpace: 'nowrap', maxHeight: '100%', overflow: 'auto', fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\" }} dangerouslySetInnerHTML={{ __html: item.log != null ? item.log.content : \"Nothing here\" }}></div>\n                    </Collapsible>\n                )}\n            </div>\n        </main>\n        </section>\n    );\n};","import React, {useState,useEffect} from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { Header, ListItemLink } from 'components';\nimport { Items, Item } from 'state';\nimport { ghHostApiUrl } from 'settings';\nimport { useParams } from 'react-router-dom';\n\nexport interface MasterProps extends Items {\n}\ninterface IJob {\n    jobId: string,\n    requestId: number,\n    timeLineId: string,\n    name: string,\n    repo: string\n    workflowname: string\n    runid : number\n}\ninterface IJobEvent {\n    repo: string,\n    job: IJob \n}\n\nexport const MasterContainer: React.FC<MasterProps> = (props) => {\n    let { url } = useRouteMatch();\n    const [ jobs, setJobs ] = useState<IJob[]>([]);\n    const { owner, repo } = useParams();\n    useEffect(() => {\n        var source = new EventSource(ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message/event?filter=**\");\n        source.addEventListener(\"job\", ev => {\n            var je = JSON.parse((ev as MessageEvent).data) as IJobEvent;\n            var x = je.job;\n            setJobs(jobs => {\n                var r = jobs.filter((j) => j.requestId < x.requestId);\n                r.unshift(x);\n                return r;\n            });\n        });\n        var apiUrl = ghHostApiUrl + \"/\" + owner + \"/\" + repo + \"/_apis/v1/Message\";\n        (async () => {\n            var newjobs = JSON.parse((await (await fetch(apiUrl, { })).text())) as IJob[];\n            var sjobs = newjobs.sort((a, b) => b.requestId - a.requestId);\n            setJobs(jobs => {\n                if(jobs.length > 0) {\n                    var x = jobs[jobs.length - 1];\n                    sjobs = sjobs.filter((j) => j.requestId < x.requestId);\n                }\n                return [...sjobs, ...jobs];\n            });\n        })();\n    }, [owner, repo])\n    return (\n        <React.Fragment>\n            <Header title=\"Jobs\" hideBackButton={true}/>\n            <ul>\n                {jobs.map((x: IJob) =>\n                    <li key={x.requestId}>\n                        <ListItemLink \n                            to={`${url}/detail/${x.requestId}`} item={{ id:  x.requestId, title: x.name, description: x.workflowname + \" - \" + x.repo + \" - \" + x.requestId }} />\n                    </li>\n                )}\n            </ul>\n        </React.Fragment>\n    );\n};\n\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { MasterDetail } from 'components';\nimport { MasterContainer, DetailContainer } from 'containers';\n\nexport const App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/master/:owner/:repo\"\n          render={props => (\n            <MasterDetail MasterType={MasterContainer} masterProps={{}} \n                          DetailType={DetailContainer} detailProps={{}}/>\n          )} />\n        <Redirect exact from=\"/\" to=\"/master/runner/server\" />\n      </Switch>\n    </Router>\n  );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Detail_component__oYrWj\",\"main\":\"Detail_main__3BTXn\",\"Collapsible\":\"Detail_Collapsible__Jcsrh\",\"Collapsible__contentInner\":\"Detail_Collapsible__contentInner__3eRRw\",\"Collapsible__trigger\":\"Detail_Collapsible__trigger__2d_zE\",\"is-open\":\"Detail_is-open__1RiHo\",\"is-disabled\":\"Detail_is-disabled__2tWtF\",\"Collapsible__custom-sibling\":\"Detail_Collapsible__custom-sibling__3G6Ru\"};"],"sourceRoot":""}